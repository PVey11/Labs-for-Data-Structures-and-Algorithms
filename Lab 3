{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a7dc5cb2-c13c-4608-b216-4914bf190bbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Make an empty list of 0-12,000 words, then make a table with the 10000 words from the git hub\n",
    "def hash(s):\n",
    "    return int(s)\n",
    "    if hash(s):\n",
    "        L[-hash(s)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a51ac7f1-76a4-467d-b029-e45a15cb9663",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collision Percentage: 445713.10000000003\n"
     ]
    }
   ],
   "source": [
    "class HashTable:\n",
    "    def __init__(self, size):\n",
    "        self.size = size\n",
    "        self.table = [None] * size\n",
    "        self.collisions = 0\n",
    "\n",
    "    def _hash(self, key):\n",
    "        # A simple hash function for strings\n",
    "        hash_value = 0\n",
    "        for char in key:\n",
    "            hash_value += ord(char)\n",
    "        return hash_value % self.size\n",
    "\n",
    "    def insert(self, key):\n",
    "        index = self._hash(key)\n",
    "        if self.table[index] is None:\n",
    "            self.table[index] = key\n",
    "        else:\n",
    "            # Linear probing as a collision mitigation strategy\n",
    "            original_index = index\n",
    "            index = (index + 1) % self.size\n",
    "            while self.table[index] is not None:\n",
    "                self.collisions += 1\n",
    "                index = (index + 1) % self.size\n",
    "                # If we come back to the original index, resize the table\n",
    "                if index == original_index:\n",
    "                    self._resize_table()\n",
    "                    return\n",
    "            self.table[index] = key\n",
    "\n",
    "    def _resize_table(self):\n",
    "        # Resize the table to be no more than 20% larger than the number of total words\n",
    "        new_size = min(self.size * 2, len(words) + int(len(words) * 0.2))\n",
    "        new_table = [None] * new_size\n",
    "\n",
    "        # Rehash and insert existing elements into the new table\n",
    "        for key in self.table:\n",
    "            if key is not None:\n",
    "                index = self._hash(key) % new_size\n",
    "                while new_table[index] is not None:\n",
    "                    index = (index + 1) % new_size\n",
    "                new_table[index] = key\n",
    "\n",
    "        self.size = new_size\n",
    "        self.table = new_table\n",
    "\n",
    "    def calculate_collision_percentage(self):\n",
    "        total_buckets = len(self.table)\n",
    "        if total_buckets == 0:\n",
    "            return 0.0\n",
    "        return (self.collisions / total_buckets) * 100\n",
    "\n",
    "\n",
    "# Read words from the provided file\n",
    "with open(\"google-10000-english-usa.txt\", \"r\") as file:\n",
    "    words = [word.strip() for word in file.readlines()]\n",
    "\n",
    "# Example usage:\n",
    "hash_table = HashTable(size=len(words))\n",
    "\n",
    "for word in words:\n",
    "    hash_table.insert(word)\n",
    "\n",
    "print(\"Collision Percentage:\", hash_table.calculate_collision_percentage())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
